#ifndef LIST_H_INCLUDED
#define LIST_H_INCLUDED



namespace stu
{
template<class T>
struct list
{
private:
    struct Node
    {
        Node* next = nullptr;
        T m_value;
        Node() = default;
        Node(T value): m_value(value) {}
    };

public:
    using value_type = T;
    using size_type = std::size_t;
    using difference_type = std::ptrdiff_t;
    using reference = T&;
    using const_reference = const reference;


    Node* head = nullptr;
    size_type m_size = 0;

public:
    void push_back(const_reference value);



    list():head(new Node()) {}
    list(std::initializer_list<value_type> l):list()
    {
        for(typename std::initializer_list<value_type>::iterator i = l.begin(); i != l.end(); ++i)
        {
            push_back(*i);
        }
    }
private:
    Node* find_last()
    {
        Node* i = head;
        for(; i->next != nullptr; i = i->next);
        return i;
    }


public:
    void push_back(const_reference value)
    {
        Node* current = find_last();
        current->m_value - value;
        current->next = new Node();
        ++m_size;
    }

    //capacity
    size_type size() const noexcept
    {
        return m_size;
    }

    size_type max_size() const noexcept;
    bool empty() const noexcept
    {
        return head->next == nullptr;
    }


};
}






#endif // LIST_H_INCLUDED
